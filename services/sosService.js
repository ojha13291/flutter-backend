const SOS = require('../models/SOS');
const User = require('../models/User');
const notificationService = require('./notificationService');
const logger = require('../utils/logger');

class SOSService {
  // Create SOS Alert
  async createSOSAlert(alertData) {
    try {
      const {
        touristId,
        userId,
        alertType = 'PANIC',
        severity = 'HIGH',
        latitude,
        longitude,
        description,
        deviceInfo,
        autoGenerated = false
      } = alertData;

      // Create SOS alert
      const sosAlert = new SOS({
        touristId,
        userId,
        alertType,
        severity,
        location: {
          type: 'Point',
          coordinates: [longitude, latitude]
        },
        description,
        deviceInfo: deviceInfo || {
          platform: 'System',
          appVersion: '1.0.0'
        },
        autoGenerated
      });

      await sosAlert.save();

      // Update user safety status
      await User.findByIdAndUpdate(userId, {
        safetyStatus: 'SOS'
      });

      logger.info('SOS Alert created:', {
        sosId: sosAlert._id,
        touristId,
        alertType,
        severity,
        autoGenerated
      });

      return sosAlert;

    } catch (error) {
      logger.error('Failed to create SOS alert:', error);
      throw error;
    }
  }

  // Auto-trigger SOS for anomalies
  async autoTriggerSOS(userId, touristId, latitude, longitude, anomalyResult) {
    const description = `AUTO-SOS: Multiple critical anomalies detected - ${anomalyResult.anomalies.map(a => a.type).join(', ')}`;
    
    return await this.createSOSAlert({
      touristId,
      userId,
      alertType: 'PANIC',
      severity: 'CRITICAL',
      latitude,
      longitude,
      description,
      autoGenerated: true
    });
  }

  // Get SOS by ID
  async getSOSById(sosId) {
    try {
      return await SOS.findById(sosId).populate('userId', 'fullName touristId mobileNumber');
    } catch (error) {
      logger.error('Failed to get SOS alert:', error);
      throw error;
    }
  }

  // Cancel SOS Alert
  async cancelSOS(sosId, reason) {
    try {
      const sosAlert = await SOS.findById(sosId);
      if (!sosAlert) {
        throw new Error('SOS alert not found');
      }

      await sosAlert.cancel(reason);
      
      // Update user safety status
      await User.findByIdAndUpdate(sosAlert.userId, {
        safetyStatus: 'SAFE'
      });

      return sosAlert;
    } catch (error) {
      logger.error('Failed to cancel SOS alert:', error);
      throw error;
    }
  }
}

module.exports = new SOSService();
